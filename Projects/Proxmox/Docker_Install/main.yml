---

- name: Install Docker and Verify
  hosts: labs_linux
  become: true
  vars:
    uninstall_packages: [docker.io, docker-compose, docker-doc, podman-docker, containerd]
    pre_setup_packages: [ca-certificates, curl, gnupg]
    docker_packages: [docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin]

  tasks:
    - name: (1/16) Test Reacheability
      ansible.builtin.ping:

    - name: (2/16) Update Cache
      ansible.builtin.apt:
        update_cache: true
        autoclean: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: (3/16) Upgrade All the Packages to the latest
      ansible.builtin.apt:
        upgrade: "full"
      when: ansible_facts['os_family'] == 'Debian'

    - name: (4/16) Remove (if available) conflicting packages
      ansible.builtin.apt:
        name: '{{ uninstall_packages }}'
        state: absent
      when: ansible_facts['os_family'] == 'Debian'

    - name: (5/16) Update Cache
      ansible.builtin.apt:
        update_cache: true
        autoclean: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: (6/16) Install packages to allow apt to use a repository over HTTPS
      ansible.builtin.apt:
        name: '{{ pre_setup_packages }}'
      when: ansible_facts['os_family'] == 'Debian'

    - name: (7/16) Remove gpg keys if they exist # otherwise GPG doesn't run if file already exists
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /usr/share/keyrings/docker-archive-keyring.gpg
        - /usr/share/keyrings/docker-archive-keyring.gpg_armored
      when: ansible_facts['os_family'] == 'Debian'

    - name: (8/16) Download Docker gpg key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg_armored
        mode: '0755'
        checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570 # curl -sL https://download.docker.com/linux/ubuntu/gpg|sha256sum
      when: ansible_facts['os_family'] == 'Debian'

    - name: (9/16) De-Armor Docker GPG key
      ansible.builtin.shell: gpg --dearmor < /usr/share/keyrings/docker-archive-keyring.gpg_armored > /usr/share/keyrings/docker-archive-keyring.gpg
      no_log: true
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      when: ansible_facts['os_family'] == 'Debian'

    - name: (10/16) Add Docker's repository to APT sources list
      ansible.builtin.apt_repository:
        repo: >
          deb [arch={{ architecture_map[ansible_architecture] }}
          signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
          https://download.docker.com/linux/ubuntu
          {{ ansible_distribution_release }} stable
        state: present
        update_cache: true
      vars:
        architecture_map:
          "x86_64": "amd64"
          "aarch64": "arm64"
          "aarch": "arm64"
          "armhf": "armhf"
          "armv7l": "armhf"
      when: ansible_facts['os_family'] == 'Debian'

    - name: (11/16) Install Docker Engine
      ansible.builtin.apt:
        name: '{{ docker_packages }}'
      when: ansible_facts['os_family'] == 'Debian'

    - name: (12/16) Install DNF and EPEL repository (for Red Hat-based systems)
      ansible.builtin.dnf:
        name: "dnf epel-release"
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: (13/16) Install Docker Engine (for Red Hat-based systems)
      ansible.builtin.dnf:
        name: '{{ docker_packages }}'
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: (14/16) Install pip3 if unavailable
      ansible.builtin.apt:
        name:
          - python3-pip
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: (15/16) Install 'requests' if unavailable
      ansible.builtin.pip:
        name:
          - requests
          - docker
      tags:
        - test

    - name: (16/16) Verify Docker Engine installation is successful
      community.docker.docker_container:
        name: hello-world
        image: hello-world
        auto_remove: true
        state: started
